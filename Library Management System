from datetime import datetime, timedelta

class User:
    def __init__(self, username, password, role):
        self.username = username
        self.password = password
        self.role = role

class Library:
    def __init__(self):
        self.books = []
        self.patrons = []
        self.transactions = []
        self.users = [
            User("admin", "admin123", "admin"),
            User("librarian", "librarian123", "librarian")
        ]

    def add_book(self, title, author, isbn, quantity):
        book = {
            "title": title,
            "author": author,
            "isbn": isbn,
            "quantity": quantity
        }
        self.books.append(book)
        print(f"Book '{title}' added successfully.")

    def add_patron(self, name, id, contact_info=None):
        patron = {
            "name": name,
            "id": id,
            "contact_info": contact_info if contact_info else {}
        }
        self.patrons.append(patron)
        print(f"Patron '{name}' added successfully.")

    def checkout_book(self, isbn, patron_id):
        book = self._find_book_by_isbn(isbn)
        if book:
            patron = self._find_patron_by_id(patron_id)
            if patron:
                if book['quantity'] - book.get('checked_out', 0) > 0:
                    book['checked_out'] = book.get('checked_out', 0) + 1
                    due_date = datetime.now() + timedelta(days=14)  # Due date after 14 days
                    transaction = {'book': book, 'patron': patron, 'due_date': due_date}
                    self.transactions.append(transaction)
                    print(f"Book '{book['title']}' checked out to {patron['name']}. Due on {due_date}.")
                else:
                    print("No copies of this book available for checkout.")
            else:
                print("Patron not found.")
        else:
            print("Book not found.")

    def check_in_book(self, isbn):
        for transaction in self.transactions:
            if transaction['book']['isbn'] == isbn:
                self.transactions.remove(transaction)
                transaction['book']['checked_out'] -= 1
                print(f"Book '{transaction['book']['title']}' returned by {transaction['patron']['name']}.")
                return
        print("Book not found or not checked out.")

    def generate_reports(self):
        print("Generating Reports...")
        # List of all books in the library
        print("List of all books:")
        for book in self.books:
            print(f"- {book['title']} by {book['author']} (ISBN: {book['isbn']}, Quantity: {book['quantity']})")

        # List of books checked out and their due dates
        print("\nList of checked out books:")
        for transaction in self.transactions:
            print(f"- {transaction['book']['title']} by {transaction['book']['author']}, Due Date: {transaction['due_date']}")

        print("Reports Generated.")

    def _find_book_by_isbn(self, isbn):
        for book in self.books:
            if book['isbn'] == isbn:
                return book
        return None

    def _find_patron_by_id(self, patron_id):
        for patron in self.patrons:
            if patron['id'] == patron_id:
                return patron
        return None

class CLI:
    def __init__(self, library):
        self.library = library

    def display_menu(self):
        print("Library Management System")
        print("1. Add Book")
        print("2. Add Patron")
        print("3. Check Out Book")
        print("4. Check In Book")
        print("5. Generate Reports")
        print("6. Exit")

    def run(self):
        while True:
            self.display_menu()
            choice = input("Enter your choice: ")
            if choice == '1':
                self.add_book()
            elif choice == '2':
                self.add_patron()
            elif choice == '3':
                self.check_out_book()
            elif choice == '4':
                self.check_in_book()
            elif choice == '5':
                self.generate_reports()
            elif choice == '6':
                print("Exiting...")
                break
            else:
                print("Invalid choice. Please try again.")

    def add_book(self):
        title = input("Enter book title: ")
        author = input("Enter author name: ")
        isbn = input("Enter ISBN: ")
        quantity = int(input("Enter quantity: "))
        self.library.add_book(title, author, isbn, quantity)

    def add_patron(self):
        name = input("Enter patron name: ")
        id = input("Enter patron ID: ")
        self.library.add_patron(name, id)

    def check_out_book(self):
        isbn = input("Enter ISBN of the book to check out: ")
        patron_id = input("Enter patron ID: ")
        self.library.checkout_book(isbn, patron_id)

    def check_in_book(self):
        isbn = input("Enter ISBN of the book to check in: ")
        self.library.check_in_book(isbn)

    def generate_reports(self):
        self.library.generate_reports()


if __name__ == "__main__":
    library = Library()
    cli = CLI(library)
    cli.run()
